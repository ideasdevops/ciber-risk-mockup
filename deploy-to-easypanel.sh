#!/bin/bash

# ===============================================
# SCRIPT DE DEPLOY PARA EASYPANEL - LANDING PAGE MARKETING IA
# ===============================================
# Script final para desplegar la landing page en EasyPanel
# ===============================================

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes
print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}[HEADER]${NC} $1"
}

# Banner de inicio
echo "==============================================="
echo "üöÄ DEPLOY LANDING PAGE MARKETING IA - EASYPANEL"
echo "==============================================="
echo ""

# Verificar que estamos en el directorio correcto
if [ ! -f "Dockerfile.easypanel-optimized" ]; then
    print_error "No se encontr√≥ Dockerfile.easypanel-optimized"
    print_error "Ejecuta este script desde el directorio del proyecto"
    exit 1
fi

# Paso 1: Validaci√≥n
print_header "PASO 1: VALIDACI√ìN PRE-DEPLOY"
echo "==============================================="

if [ -f "validate-deploy.sh" ]; then
    print_message "Ejecutando validaci√≥n..."
    ./validate-deploy.sh
    if [ $? -eq 0 ]; then
        print_success "Validaci√≥n exitosa"
    else
        print_error "Validaci√≥n fall√≥. Corrige los errores antes de continuar"
        exit 1
    fi
else
    print_warning "Script de validaci√≥n no encontrado, continuando..."
fi

echo ""

# Paso 2: Verificar Git
print_header "PASO 2: CONFIGURACI√ìN DE GIT"
echo "==============================================="

if [ -d ".git" ]; then
    print_success "Repositorio Git encontrado"
    
    # Verificar estado de Git
    if [ -n "$(git status --porcelain)" ]; then
        print_warning "Hay cambios sin commit:"
        git status --short
        
        echo ""
        read -p "¬øDeseas hacer commit de los cambios? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_message "Haciendo commit de los cambios..."
            git add .
            git commit -m "Deploy: Landing page Marketing IA lista para EasyPanel

- Dockerfile optimizado para nginx
- Configuraci√≥n de nginx con cach√© y seguridad
- Healthcheck integrado
- Scripts de validaci√≥n
- Documentaci√≥n de deploy completa

Archivos incluidos:
- frontend/ con todos los assets
- Dockerfile.easypanel-optimized
- .dockerignore
- validate-deploy.sh
- DEPLOY.md"
            print_success "Commit realizado"
        else
            print_warning "Continuando sin commit..."
        fi
    else
        print_success "No hay cambios pendientes"
    fi
    
    # Mostrar informaci√≥n del repositorio
    print_message "Informaci√≥n del repositorio:"
    echo "  - Rama actual: $(git branch --show-current)"
    echo "  - √öltimo commit: $(git log -1 --oneline)"
    echo "  - Remoto: $(git remote get-url origin 2>/dev/null || echo 'No configurado')"
    
else
    print_warning "No se encontr√≥ repositorio Git"
    print_message "Para usar EasyPanel, necesitas un repositorio Git:"
    echo "  git init"
    echo "  git add ."
    echo "  git commit -m 'Initial commit'"
    echo "  git remote add origin <tu-repositorio>"
    echo "  git push -u origin main"
fi

echo ""

# Paso 3: Informaci√≥n de Deploy
print_header "PASO 3: INFORMACI√ìN PARA EASYPANEL"
echo "==============================================="

print_message "Configuraci√≥n requerida en EasyPanel:"
echo ""
echo "üìã CONFIGURACI√ìN DE LA APLICACI√ìN:"
echo "  ‚Ä¢ Tipo: SSH Git"
echo "  ‚Ä¢ Repositorio: $(git remote get-url origin 2>/dev/null || echo '<tu-repositorio-git>')"
echo "  ‚Ä¢ Dockerfile: Dockerfile.easypanel-optimized"
echo "  ‚Ä¢ Puerto: 80"
echo "  ‚Ä¢ Protocolo: HTTP"
echo ""

echo "üìÅ VOL√öMENES REQUERIDOS:"
echo "  ‚Ä¢ nginx-logs ‚Üí /data/logs/nginx"
echo "  ‚Ä¢ nginx-cache ‚Üí /var/cache/nginx"
echo ""

echo "üîß VARIABLES DE ENTORNO:"
echo "  ‚Ä¢ APP_NAME=marketing-ia-landing"
echo "  ‚Ä¢ APP_VERSION=1.0.0"
echo "  ‚Ä¢ APP_ENV=production"
echo ""

echo "üåê ENDPOINTS DISPONIBLES:"
echo "  ‚Ä¢ / ‚Üí Landing page principal"
echo "  ‚Ä¢ /ejemplos.html ‚Üí P√°gina de ejemplos"
echo "  ‚Ä¢ /health ‚Üí Health check"
echo "  ‚Ä¢ /assets/ ‚Üí Recursos est√°ticos"
echo ""

# Paso 4: Test Local (Opcional)
print_header "PASO 4: TEST LOCAL (OPCIONAL)"
echo "==============================================="

read -p "¬øDeseas hacer un test local del Docker? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_message "Construyendo imagen Docker..."
    docker build -f Dockerfile.easypanel-optimized -t marketing-ia-landing .
    
    if [ $? -eq 0 ]; then
        print_success "Imagen construida exitosamente"
        
        print_message "Iniciando contenedor en puerto 8080..."
        docker run -d --name marketing-ia-test -p 8080:80 marketing-ia-landing
        
        if [ $? -eq 0 ]; then
            print_success "Contenedor iniciado"
            print_message "Puedes probar la aplicaci√≥n en: http://localhost:8080"
            print_message "Health check: http://localhost:8080/health"
            echo ""
            print_warning "Para detener el test: docker stop marketing-ia-test && docker rm marketing-ia-test"
        else
            print_error "Error al iniciar el contenedor"
        fi
    else
        print_error "Error al construir la imagen"
    fi
else
    print_message "Saltando test local..."
fi

echo ""

# Paso 5: Resumen Final
print_header "PASO 5: RESUMEN FINAL"
echo "==============================================="

print_success "‚úÖ CONFIGURACI√ìN COMPLETADA"
echo ""
print_message "Archivos creados:"
echo "  ‚úì Dockerfile.easypanel-optimized"
echo "  ‚úì .dockerignore"
echo "  ‚úì validate-deploy.sh"
echo "  ‚úì DEPLOY.md"
echo "  ‚úì frontend/ (con todos los assets)"
echo ""

print_message "Pr√≥ximos pasos:"
echo "1. üîó Configurar la aplicaci√≥n en EasyPanel con la informaci√≥n mostrada arriba"
echo "2. üöÄ Hacer push del c√≥digo al repositorio Git"
echo "3. üåê EasyPanel detectar√° los cambios y har√° el deploy autom√°ticamente"
echo "4. ‚úÖ Verificar que la aplicaci√≥n est√© funcionando"
echo ""

print_message "Documentaci√≥n completa disponible en: DEPLOY.md"
print_message "Para validar en cualquier momento: ./validate-deploy.sh"
echo ""

print_success "üéâ ¬°La landing page est√° lista para deploy en EasyPanel!"
echo ""

# Mostrar informaci√≥n de contacto
echo "==============================================="
echo "üìû Soporte:"
echo "  ‚Ä¢ Revisar logs del contenedor en EasyPanel"
echo "  ‚Ä¢ Ejecutar ./validate-deploy.sh para diagn√≥stico"
echo "  ‚Ä¢ Consultar DEPLOY.md para troubleshooting"
echo "==============================================="
